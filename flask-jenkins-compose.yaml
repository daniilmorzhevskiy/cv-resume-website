apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-jenkins
  template:
    metadata:
      labels:
        app: flask-jenkins
    spec:
      containers:
        - name: flask-app
          image: daniilsd/cv-project:latest
          ports:
            - containerPort: 5000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        - name: jenkins
          image: jenkins/jenkins:lts
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-data
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
spec:
  selector:
    app: jenkins
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:latest
          ports:
            - containerPort: 5672
            - containerPort: 15672
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: rabbitmq-management
      protocol: TCP
      port: 15672
      targetPort: 15672
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-service
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#   type: NodePort
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: argocd-cm
#   labels:
#     app.kubernetes.io/name: argocd-cm

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: argocd-server
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: argocd-server
#   template:
#     metadata:
#       labels:
#         app: argocd-server
#     spec:
#       containers:
#         - name: argocd-server
#           image: argoproj/argocd:latest
#           ports:
#             - containerPort: 8081
#           command: ["argocd-server", "--insecure"]
#           volumeMounts:
#             - name: argocd-cm
#               mountPath: /etc/argocd/config
#               subPath: config
#       volumes:
#         - name: argocd-cm
#           configMap:
#             name: argocd-cm
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: argocd-server
# spec:
#   selector:
#     app: argocd-server
#   ports:
#     - protocol: TCP
#       port: 8081
#       targetPort: 8081
#   type: NodePort
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: argocd-server-ingress
# spec:
#   rules:
#     - host: localhost
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: argocd-server
#                 port:
#                   number: 8081
